
TODO:

while/for/lists or {head, tail}

case insensitive
Overloading is fudged by the integrator, but method names within a single namespace must be unique. 
compile time metaprogramming...
generics = types that haven;t been supplied, even after usage
mutable values are updated in all parent scopes on assignment
Allow implicit scopes as array items

functionWithSideEffects~ = 

{lowRoot,highRoot} = quadratic {a = 1, b = -2, c = 3 }

results = loop
    while~ = true
    do~ = case "var"
        | "var" = 5
        | else = 4

loop = case
    | while~ {} =
        head= do~ {}
        tail= loop {do~, while~}
    | else = `none


# need some equivalent to these...
times = (callback i) for i in [1..count]

isInRange = value <= max && value >= min

inRange = {value= 5}.isInRange {min= 3, max= 7}


import = [
  library = "Standard.dll"
  rules = [
    {import = "*"},
    {exclude = "System.StringHandling.UriEscaping"}
  ]
,
  library = "Alternative.dll"
  rules = [
    {exclude = "*"},
    {import = "Alternative.AlternativeUriEscaping"}
  ]
]

exclude = [
  namespaces = ["*"]
  rules = [{exclude = "*"}]
,
  namespaces = [
    "MyApp.Controller.*",
    "MyApp.UI.*",
    "MyApp.Logic.*",
    "MyApp.Database.*"
  ]
  rules = [{import = "*"}]
,
  namespaces = [
    "MyApp.UI.*",
    "MyApp.Logic.*",
    "MyApp.Database.*"
  ]
  rules = [{exclude = "MyApp.*"}]
,
  namespaces = ["MyApp.UI.*"]
  rules = [{import = "*"}]
,
  namespaces = ["MyApp.Logic.*"]
  rules = [{import = "*"}]
,
  namespaces = ["MyApp.Database.*"]
  rules = [{import = "*"}]
]


It is a compile error to specify rules in an order where later patterns are less specific than earlier patterns because of the effect on readability.
